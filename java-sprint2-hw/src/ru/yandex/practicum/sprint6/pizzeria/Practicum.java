package ru.yandex.practicum.sprint6.pizzeria;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

class Practicum {
	// –°–æ–∑–¥–∞–¥–∏–º —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.
	// –í –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –±—É–¥–µ—Ç –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞.
	// –í –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
	private Map<String, Integer> orders = new HashMap<>();

	public static void main(String[] args) {
		Practicum pizzeria = new Practicum();
		pizzeria.openPizzeria();
		pizzeria.printStatistics();
	}

	// –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã! üçï
	private void openPizzeria() {
		newOrder("–õ–µ–æ–Ω–∞—Ä–¥–æ");
		newOrder("–î–æ–Ω–∞—Ç–µ–ª–ª–æ");
		newOrder("–†–∞—Ñ–∞—ç–ª—å");
		newOrder("–õ–µ–æ–Ω–∞—Ä–¥–æ");
		newOrder("–ú–∏–∫–µ–ª–∞–Ω–¥–∂–µ–ª–æ");
		newOrder("–®—Ä–µ–¥–¥–µ—Ä");
		newOrder("–î–æ–Ω–∞—Ç–µ–ª–ª–æ");
	}

	private void newOrder(String clientName) {
		// –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—É. –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á—ë—Ç—á–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
		// –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É—á–µ—Å—Ç—å –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã —Ä–∞–Ω–µ–µ.
		if (orders.containsKey(clientName)) {
			int count = orders.get(clientName);
			orders.put(clientName, ++count);
		} else {
			orders.put(clientName, 1);
		}

	}

	private void printStatistics() {
		// –í—ã–≤–µ–¥–∏—Ç–µ —Å–æ–±—Ä–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –ø–æ—Å—á–∏—Ç–∞–π—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
		// –∑–∞–∫–∞–∑–æ–≤.
		//
		// –§–æ—Ä–º–∞—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Å–æ–ª—å:
		// –ó–∞–∫–∞–∑–æ–≤ –æ—Ç –ú–∏–∫–µ–ª–∞–Ω–¥–∂–µ–ª–æ: 15
		// –ó–∞–∫–∞–∑–æ–≤ –æ—Ç –õ–µ–æ–Ω–∞—Ä–¥–æ: 4
		// –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: 19
		int count = 0;
		for (Entry<String, Integer> e : orders.entrySet()) {
			System.out.println("–ó–∞–∫–∞–∑–æ–≤ –æ—Ç " + e.getKey() + ": " + e.getValue());
			count += e.getValue();
		}
		System.out.println("–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: " + count);
	}
}